<?php
/**
 * CreateTaskDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   kiamet MAVOUNGOU
 * @link     https://github.com/paps-app/paps-php-client
 */

/**
 * Paps API
 *
 * The Paps API description
 *
 * OpenAPI spec version: 1.0
 * Contact: mavoungouzenou@gmail.com
 * Generated by: https://github.com/paps-app/paps-php-client.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/paps-app/paps-php-client
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateTaskDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   kiamet MAVOUNGOU
 * @link     https://github.com/paps-app/paps-php-client
 */
class CreateTaskDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateTaskDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
'date_pickup' => 'string',
'time_pickup' => 'string',
'vehicle_type' => 'string',
'address' => 'string',
'receiver' => 'AllOfCreateTaskDTOReceiver',
'parcels' => '\Swagger\Client\Model\ParcelDTO[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
'date_pickup' => null,
'time_pickup' => null,
'vehicle_type' => null,
'address' => null,
'receiver' => null,
'parcels' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
'date_pickup' => 'datePickup',
'time_pickup' => 'timePickup',
'vehicle_type' => 'vehicleType',
'address' => 'address',
'receiver' => 'receiver',
'parcels' => 'parcels'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
'date_pickup' => 'setDatePickup',
'time_pickup' => 'setTimePickup',
'vehicle_type' => 'setVehicleType',
'address' => 'setAddress',
'receiver' => 'setReceiver',
'parcels' => 'setParcels'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
'date_pickup' => 'getDatePickup',
'time_pickup' => 'getTimePickup',
'vehicle_type' => 'getVehicleType',
'address' => 'getAddress',
'receiver' => 'getReceiver',
'parcels' => 'getParcels'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_PICKUP = 'PICKUP';
const TYPE_DROPOFF = 'DROPOFF';
const TYPE_FROM_STOCK = 'FROM_STOCK';
const VEHICLE_TYPE_SCOOTER = 'SCOOTER';
const VEHICLE_TYPE_MINI_VAN = 'MINI_VAN';
const VEHICLE_TYPE_TRICYCLE = 'TRICYCLE';
const VEHICLE_TYPE_VAN = 'VAN';
const VEHICLE_TYPE_CAMION = 'CAMION';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PICKUP,
self::TYPE_DROPOFF,
self::TYPE_FROM_STOCK,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVehicleTypeAllowableValues()
    {
        return [
            self::VEHICLE_TYPE_SCOOTER,
self::VEHICLE_TYPE_MINI_VAN,
self::VEHICLE_TYPE_TRICYCLE,
self::VEHICLE_TYPE_VAN,
self::VEHICLE_TYPE_CAMION,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['date_pickup'] = isset($data['date_pickup']) ? $data['date_pickup'] : '2022-03-18';
        $this->container['time_pickup'] = isset($data['time_pickup']) ? $data['time_pickup'] : null;
        $this->container['vehicle_type'] = isset($data['vehicle_type']) ? $data['vehicle_type'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['receiver'] = isset($data['receiver']) ? $data['receiver'] : null;
        $this->container['parcels'] = isset($data['parcels']) ? $data['parcels'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['date_pickup'] === null) {
            $invalidProperties[] = "'date_pickup' can't be null";
        }
        if ($this->container['time_pickup'] === null) {
            $invalidProperties[] = "'time_pickup' can't be null";
        }
        if ($this->container['vehicle_type'] === null) {
            $invalidProperties[] = "'vehicle_type' can't be null";
        }
        $allowedValues = $this->getVehicleTypeAllowableValues();
        if (!is_null($this->container['vehicle_type']) && !in_array($this->container['vehicle_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'vehicle_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['receiver'] === null) {
            $invalidProperties[] = "'receiver' can't be null";
        }
        if ($this->container['parcels'] === null) {
            $invalidProperties[] = "'parcels' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of job you want to create
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets date_pickup
     *
     * @return string
     */
    public function getDatePickup()
    {
        return $this->container['date_pickup'];
    }

    /**
     * Sets date_pickup
     *
     * @param string $date_pickup Day to pickup the article
     *
     * @return $this
     */
    public function setDatePickup($date_pickup)
    {
        $this->container['date_pickup'] = $date_pickup;

        return $this;
    }

    /**
     * Gets time_pickup
     *
     * @return string
     */
    public function getTimePickup()
    {
        return $this->container['time_pickup'];
    }

    /**
     * Sets time_pickup
     *
     * @param string $time_pickup Time to pickup the article
     *
     * @return $this
     */
    public function setTimePickup($time_pickup)
    {
        $this->container['time_pickup'] = $time_pickup;

        return $this;
    }

    /**
     * Gets vehicle_type
     *
     * @return string
     */
    public function getVehicleType()
    {
        return $this->container['vehicle_type'];
    }

    /**
     * Sets vehicle_type
     *
     * @param string $vehicle_type The type of vehicle used for the pickup
     *
     * @return $this
     */
    public function setVehicleType($vehicle_type)
    {
        $allowedValues = $this->getVehicleTypeAllowableValues();
        if (!in_array($vehicle_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'vehicle_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vehicle_type'] = $vehicle_type;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address The address where the package is to be picked up
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets receiver
     *
     * @return AllOfCreateTaskDTOReceiver
     */
    public function getReceiver()
    {
        return $this->container['receiver'];
    }

    /**
     * Sets receiver
     *
     * @param AllOfCreateTaskDTOReceiver $receiver Receiver information
     *
     * @return $this
     */
    public function setReceiver($receiver)
    {
        $this->container['receiver'] = $receiver;

        return $this;
    }

    /**
     * Gets parcels
     *
     * @return \Swagger\Client\Model\ParcelDTO[]
     */
    public function getParcels()
    {
        return $this->container['parcels'];
    }

    /**
     * Sets parcels
     *
     * @param \Swagger\Client\Model\ParcelDTO[] $parcels Add Parcels
     *
     * @return $this
     */
    public function setParcels($parcels)
    {
        $this->container['parcels'] = $parcels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
