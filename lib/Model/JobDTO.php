<?php
/**
 * JobDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   kiamet MAVOUNGOU
 * @link     https://github.com/paps-app/paps-php-client
 */

/**
 * Paps API
 *
 * The Paps API description
 *
 * OpenAPI spec version: 1.0
 * Contact: mavoungouzenou@gmail.com
 * Generated by: https://github.com/paps-app/paps-php-client.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/paps-app/paps-php-client
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * JobDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   kiamet MAVOUNGOU
 * @link     https://github.com/paps-app/paps-php-client
 */
class JobDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JobDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'job_type' => 'string',
'job_address' => 'AllOfJobDTOJobAddress',
'job_date' => 'string',
'job_slot_start' => 'string',
'job_slot_end' => 'string',
'job_time' => 'string',
'job_vehicle_type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'job_type' => null,
'job_address' => null,
'job_date' => null,
'job_slot_start' => null,
'job_slot_end' => null,
'job_time' => null,
'job_vehicle_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'job_type' => 'job_type',
'job_address' => 'job_address',
'job_date' => 'job_date',
'job_slot_start' => 'job_slot_start',
'job_slot_end' => 'job_slot_end',
'job_time' => 'job_time',
'job_vehicle_type' => 'job_vehicle_type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'job_type' => 'setJobType',
'job_address' => 'setJobAddress',
'job_date' => 'setJobDate',
'job_slot_start' => 'setJobSlotStart',
'job_slot_end' => 'setJobSlotEnd',
'job_time' => 'setJobTime',
'job_vehicle_type' => 'setJobVehicleType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'job_type' => 'getJobType',
'job_address' => 'getJobAddress',
'job_date' => 'getJobDate',
'job_slot_start' => 'getJobSlotStart',
'job_slot_end' => 'getJobSlotEnd',
'job_time' => 'getJobTime',
'job_vehicle_type' => 'getJobVehicleType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const JOB_TYPE_PICKUP = 'PICKUP';
const JOB_TYPE_DROPOFF = 'DROPOFF';
const JOB_TYPE_FROM_STOCK = 'FROM_STOCK';
const JOB_VEHICLE_TYPE_SCOOTER = 'SCOOTER';
const JOB_VEHICLE_TYPE_MINI_VAN = 'MINI_VAN';
const JOB_VEHICLE_TYPE_TRICYCLE = 'TRICYCLE';
const JOB_VEHICLE_TYPE_VAN = 'VAN';
const JOB_VEHICLE_TYPE_CAMION = 'CAMION';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJobTypeAllowableValues()
    {
        return [
            self::JOB_TYPE_PICKUP,
self::JOB_TYPE_DROPOFF,
self::JOB_TYPE_FROM_STOCK,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJobVehicleTypeAllowableValues()
    {
        return [
            self::JOB_VEHICLE_TYPE_SCOOTER,
self::JOB_VEHICLE_TYPE_MINI_VAN,
self::JOB_VEHICLE_TYPE_TRICYCLE,
self::JOB_VEHICLE_TYPE_VAN,
self::JOB_VEHICLE_TYPE_CAMION,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['job_type'] = isset($data['job_type']) ? $data['job_type'] : null;
        $this->container['job_address'] = isset($data['job_address']) ? $data['job_address'] : null;
        $this->container['job_date'] = isset($data['job_date']) ? $data['job_date'] : null;
        $this->container['job_slot_start'] = isset($data['job_slot_start']) ? $data['job_slot_start'] : null;
        $this->container['job_slot_end'] = isset($data['job_slot_end']) ? $data['job_slot_end'] : null;
        $this->container['job_time'] = isset($data['job_time']) ? $data['job_time'] : null;
        $this->container['job_vehicle_type'] = isset($data['job_vehicle_type']) ? $data['job_vehicle_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['job_type'] === null) {
            $invalidProperties[] = "'job_type' can't be null";
        }
        $allowedValues = $this->getJobTypeAllowableValues();
        if (!is_null($this->container['job_type']) && !in_array($this->container['job_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'job_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['job_address'] === null) {
            $invalidProperties[] = "'job_address' can't be null";
        }
        if ($this->container['job_date'] === null) {
            $invalidProperties[] = "'job_date' can't be null";
        }
        if ($this->container['job_slot_start'] === null) {
            $invalidProperties[] = "'job_slot_start' can't be null";
        }
        if ($this->container['job_slot_end'] === null) {
            $invalidProperties[] = "'job_slot_end' can't be null";
        }
        if ($this->container['job_time'] === null) {
            $invalidProperties[] = "'job_time' can't be null";
        }
        if ($this->container['job_vehicle_type'] === null) {
            $invalidProperties[] = "'job_vehicle_type' can't be null";
        }
        $allowedValues = $this->getJobVehicleTypeAllowableValues();
        if (!is_null($this->container['job_vehicle_type']) && !in_array($this->container['job_vehicle_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'job_vehicle_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets job_type
     *
     * @return string
     */
    public function getJobType()
    {
        return $this->container['job_type'];
    }

    /**
     * Sets job_type
     *
     * @param string $job_type The type of the job.
     *
     * @return $this
     */
    public function setJobType($job_type)
    {
        $allowedValues = $this->getJobTypeAllowableValues();
        if (!in_array($job_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'job_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['job_type'] = $job_type;

        return $this;
    }

    /**
     * Gets job_address
     *
     * @return AllOfJobDTOJobAddress
     */
    public function getJobAddress()
    {
        return $this->container['job_address'];
    }

    /**
     * Sets job_address
     *
     * @param AllOfJobDTOJobAddress $job_address The address of the job.
     *
     * @return $this
     */
    public function setJobAddress($job_address)
    {
        $this->container['job_address'] = $job_address;

        return $this;
    }

    /**
     * Gets job_date
     *
     * @return string
     */
    public function getJobDate()
    {
        return $this->container['job_date'];
    }

    /**
     * Sets job_date
     *
     * @param string $job_date The date of the job.
     *
     * @return $this
     */
    public function setJobDate($job_date)
    {
        $this->container['job_date'] = $job_date;

        return $this;
    }

    /**
     * Gets job_slot_start
     *
     * @return string
     */
    public function getJobSlotStart()
    {
        return $this->container['job_slot_start'];
    }

    /**
     * Sets job_slot_start
     *
     * @param string $job_slot_start The slot start of the job.
     *
     * @return $this
     */
    public function setJobSlotStart($job_slot_start)
    {
        $this->container['job_slot_start'] = $job_slot_start;

        return $this;
    }

    /**
     * Gets job_slot_end
     *
     * @return string
     */
    public function getJobSlotEnd()
    {
        return $this->container['job_slot_end'];
    }

    /**
     * Sets job_slot_end
     *
     * @param string $job_slot_end The slot end of the job.
     *
     * @return $this
     */
    public function setJobSlotEnd($job_slot_end)
    {
        $this->container['job_slot_end'] = $job_slot_end;

        return $this;
    }

    /**
     * Gets job_time
     *
     * @return string
     */
    public function getJobTime()
    {
        return $this->container['job_time'];
    }

    /**
     * Sets job_time
     *
     * @param string $job_time The time to pickup of the job.
     *
     * @return $this
     */
    public function setJobTime($job_time)
    {
        $this->container['job_time'] = $job_time;

        return $this;
    }

    /**
     * Gets job_vehicle_type
     *
     * @return string
     */
    public function getJobVehicleType()
    {
        return $this->container['job_vehicle_type'];
    }

    /**
     * Sets job_vehicle_type
     *
     * @param string $job_vehicle_type The type of vehicle used for the job.
     *
     * @return $this
     */
    public function setJobVehicleType($job_vehicle_type)
    {
        $allowedValues = $this->getJobVehicleTypeAllowableValues();
        if (!in_array($job_vehicle_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'job_vehicle_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['job_vehicle_type'] = $job_vehicle_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
