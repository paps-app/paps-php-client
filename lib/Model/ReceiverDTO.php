<?php
/**
 * ReceiverDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   kiamet MAVOUNGOU
 * @link     https://github.com/paps-app/paps-php-client
 */

/**
 * Paps API
 *
 * The Paps API description
 *
 * OpenAPI spec version: 1.0
 * Contact: mavoungouzenou@gmail.com
 * Generated by: https://github.com/paps-app/paps-php-client.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/paps-app/paps-php-client
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReceiverDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   kiamet MAVOUNGOU
 * @link     https://github.com/paps-app/paps-php-client
 */
class ReceiverDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReceiverDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'receiver_firstname' => 'string',
'receiver_lastname' => 'string',
'receiver_phone_number' => 'string',
'receiver_address' => '\Swagger\Client\Model\AddressDTO[]',
'receiver_email' => 'string',
'receiver_entreprise' => 'string',
'receiver_specification_address' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'receiver_firstname' => null,
'receiver_lastname' => null,
'receiver_phone_number' => null,
'receiver_address' => null,
'receiver_email' => null,
'receiver_entreprise' => null,
'receiver_specification_address' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'receiver_firstname' => 'receiver_firstname',
'receiver_lastname' => 'receiver_lastname',
'receiver_phone_number' => 'receiver_phone_number',
'receiver_address' => 'receiver_address',
'receiver_email' => 'receiver_email',
'receiver_entreprise' => 'receiver_entreprise',
'receiver_specification_address' => 'receiver_specification_address'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'receiver_firstname' => 'setReceiverFirstname',
'receiver_lastname' => 'setReceiverLastname',
'receiver_phone_number' => 'setReceiverPhoneNumber',
'receiver_address' => 'setReceiverAddress',
'receiver_email' => 'setReceiverEmail',
'receiver_entreprise' => 'setReceiverEntreprise',
'receiver_specification_address' => 'setReceiverSpecificationAddress'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'receiver_firstname' => 'getReceiverFirstname',
'receiver_lastname' => 'getReceiverLastname',
'receiver_phone_number' => 'getReceiverPhoneNumber',
'receiver_address' => 'getReceiverAddress',
'receiver_email' => 'getReceiverEmail',
'receiver_entreprise' => 'getReceiverEntreprise',
'receiver_specification_address' => 'getReceiverSpecificationAddress'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['receiver_firstname'] = isset($data['receiver_firstname']) ? $data['receiver_firstname'] : null;
        $this->container['receiver_lastname'] = isset($data['receiver_lastname']) ? $data['receiver_lastname'] : null;
        $this->container['receiver_phone_number'] = isset($data['receiver_phone_number']) ? $data['receiver_phone_number'] : null;
        $this->container['receiver_address'] = isset($data['receiver_address']) ? $data['receiver_address'] : null;
        $this->container['receiver_email'] = isset($data['receiver_email']) ? $data['receiver_email'] : null;
        $this->container['receiver_entreprise'] = isset($data['receiver_entreprise']) ? $data['receiver_entreprise'] : null;
        $this->container['receiver_specification_address'] = isset($data['receiver_specification_address']) ? $data['receiver_specification_address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['receiver_firstname'] === null) {
            $invalidProperties[] = "'receiver_firstname' can't be null";
        }
        if ($this->container['receiver_lastname'] === null) {
            $invalidProperties[] = "'receiver_lastname' can't be null";
        }
        if ($this->container['receiver_phone_number'] === null) {
            $invalidProperties[] = "'receiver_phone_number' can't be null";
        }
        if ($this->container['receiver_address'] === null) {
            $invalidProperties[] = "'receiver_address' can't be null";
        }
        if ($this->container['receiver_email'] === null) {
            $invalidProperties[] = "'receiver_email' can't be null";
        }
        if ($this->container['receiver_entreprise'] === null) {
            $invalidProperties[] = "'receiver_entreprise' can't be null";
        }
        if ($this->container['receiver_specification_address'] === null) {
            $invalidProperties[] = "'receiver_specification_address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets receiver_firstname
     *
     * @return string
     */
    public function getReceiverFirstname()
    {
        return $this->container['receiver_firstname'];
    }

    /**
     * Sets receiver_firstname
     *
     * @param string $receiver_firstname The firstname of the Client
     *
     * @return $this
     */
    public function setReceiverFirstname($receiver_firstname)
    {
        $this->container['receiver_firstname'] = $receiver_firstname;

        return $this;
    }

    /**
     * Gets receiver_lastname
     *
     * @return string
     */
    public function getReceiverLastname()
    {
        return $this->container['receiver_lastname'];
    }

    /**
     * Sets receiver_lastname
     *
     * @param string $receiver_lastname The lastname of the Client
     *
     * @return $this
     */
    public function setReceiverLastname($receiver_lastname)
    {
        $this->container['receiver_lastname'] = $receiver_lastname;

        return $this;
    }

    /**
     * Gets receiver_phone_number
     *
     * @return string
     */
    public function getReceiverPhoneNumber()
    {
        return $this->container['receiver_phone_number'];
    }

    /**
     * Sets receiver_phone_number
     *
     * @param string $receiver_phone_number The phone number of the Client
     *
     * @return $this
     */
    public function setReceiverPhoneNumber($receiver_phone_number)
    {
        $this->container['receiver_phone_number'] = $receiver_phone_number;

        return $this;
    }

    /**
     * Gets receiver_address
     *
     * @return \Swagger\Client\Model\AddressDTO[]
     */
    public function getReceiverAddress()
    {
        return $this->container['receiver_address'];
    }

    /**
     * Sets receiver_address
     *
     * @param \Swagger\Client\Model\AddressDTO[] $receiver_address The client's address
     *
     * @return $this
     */
    public function setReceiverAddress($receiver_address)
    {
        $this->container['receiver_address'] = $receiver_address;

        return $this;
    }

    /**
     * Gets receiver_email
     *
     * @return string
     */
    public function getReceiverEmail()
    {
        return $this->container['receiver_email'];
    }

    /**
     * Sets receiver_email
     *
     * @param string $receiver_email The email of the Client
     *
     * @return $this
     */
    public function setReceiverEmail($receiver_email)
    {
        $this->container['receiver_email'] = $receiver_email;

        return $this;
    }

    /**
     * Gets receiver_entreprise
     *
     * @return string
     */
    public function getReceiverEntreprise()
    {
        return $this->container['receiver_entreprise'];
    }

    /**
     * Sets receiver_entreprise
     *
     * @param string $receiver_entreprise The name entreprise of the Client
     *
     * @return $this
     */
    public function setReceiverEntreprise($receiver_entreprise)
    {
        $this->container['receiver_entreprise'] = $receiver_entreprise;

        return $this;
    }

    /**
     * Gets receiver_specification_address
     *
     * @return string
     */
    public function getReceiverSpecificationAddress()
    {
        return $this->container['receiver_specification_address'];
    }

    /**
     * Sets receiver_specification_address
     *
     * @param string $receiver_specification_address The specification address of the Client
     *
     * @return $this
     */
    public function setReceiverSpecificationAddress($receiver_specification_address)
    {
        $this->container['receiver_specification_address'] = $receiver_specification_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
