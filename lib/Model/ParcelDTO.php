<?php
/**
 * ParcelDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   kiamet MAVOUNGOU
 * @link     https://github.com/paps-app/paps-php-client
 */

/**
 * Paps API
 *
 * The Paps API description
 *
 * OpenAPI spec version: 1.0
 * Contact: mavoungouzenou@gmail.com
 * Generated by: https://github.com/paps-app/paps-php-client.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/paps-app/paps-php-client
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ParcelDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   kiamet MAVOUNGOU
 * @link     https://github.com/paps-app/paps-php-client
 */
class ParcelDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ParcelDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'package_size' => 'string',
'description' => 'string',
'price' => 'float',
'amount_collect' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'package_size' => null,
'description' => null,
'price' => null,
'amount_collect' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'package_size' => 'packageSize',
'description' => 'description',
'price' => 'price',
'amount_collect' => 'amountCollect'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'package_size' => 'setPackageSize',
'description' => 'setDescription',
'price' => 'setPrice',
'amount_collect' => 'setAmountCollect'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'package_size' => 'getPackageSize',
'description' => 'getDescription',
'price' => 'getPrice',
'amount_collect' => 'getAmountCollect'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PACKAGE_SIZE_S = 'S';
const PACKAGE_SIZE_M = 'M';
const PACKAGE_SIZE_L = 'L';
const PACKAGE_SIZE_XL = 'XL';
const PACKAGE_SIZE_XXL = 'XXL';
const PACKAGE_SIZE_D = 'D';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackageSizeAllowableValues()
    {
        return [
            self::PACKAGE_SIZE_S,
self::PACKAGE_SIZE_M,
self::PACKAGE_SIZE_L,
self::PACKAGE_SIZE_XL,
self::PACKAGE_SIZE_XXL,
self::PACKAGE_SIZE_D,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['package_size'] = isset($data['package_size']) ? $data['package_size'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['amount_collect'] = isset($data['amount_collect']) ? $data['amount_collect'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['package_size'] === null) {
            $invalidProperties[] = "'package_size' can't be null";
        }
        $allowedValues = $this->getPackageSizeAllowableValues();
        if (!is_null($this->container['package_size']) && !in_array($this->container['package_size'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'package_size', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['amount_collect'] === null) {
            $invalidProperties[] = "'amount_collect' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets package_size
     *
     * @return string
     */
    public function getPackageSize()
    {
        return $this->container['package_size'];
    }

    /**
     * Sets package_size
     *
     * @param string $package_size The packageSize of the Parcel
     *
     * @return $this
     */
    public function setPackageSize($package_size)
    {
        $allowedValues = $this->getPackageSizeAllowableValues();
        if (!in_array($package_size, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'package_size', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['package_size'] = $package_size;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the Parcel
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price The price of the Parcel
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets amount_collect
     *
     * @return float
     */
    public function getAmountCollect()
    {
        return $this->container['amount_collect'];
    }

    /**
     * Sets amount_collect
     *
     * @param float $amount_collect The amountCollect of the Parcel
     *
     * @return $this
     */
    public function setAmountCollect($amount_collect)
    {
        $this->container['amount_collect'] = $amount_collect;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
